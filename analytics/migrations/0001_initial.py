# Generated by Django 5.2 on 2025-08-29 07:35

import django.db.models.deletion
import django.utils.timezone
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('settings_app', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='KPIMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Metric Name')),
                ('metric_type', models.CharField(choices=[('revenue', 'Revenue'), ('profit', 'Profit'), ('sales_volume', 'Sales Volume'), ('customer_count', 'Customer Count'), ('inventory_turnover', 'Inventory Turnover'), ('average_transaction', 'Average Transaction Value'), ('conversion_rate', 'Conversion Rate'), ('growth_rate', 'Growth Rate'), ('margin', 'Profit Margin'), ('custom', 'Custom Metric')], max_length=20, verbose_name='Metric Type')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('calculation_method', models.CharField(choices=[('sum', 'Sum'), ('average', 'Average'), ('count', 'Count'), ('percentage', 'Percentage'), ('ratio', 'Ratio'), ('custom_query', 'Custom Query')], max_length=20, verbose_name='Calculation Method')),
                ('source_model', models.CharField(help_text='Django model to query for this metric', max_length=100, verbose_name='Source Model')),
                ('source_field', models.CharField(blank=True, help_text='Field to aggregate (if applicable)', max_length=100, verbose_name='Source Field')),
                ('filter_conditions', models.JSONField(default=dict, help_text='JSON object with filter conditions for the query', verbose_name='Filter Conditions')),
                ('custom_query', models.TextField(blank=True, help_text='Custom SQL query for complex metrics', verbose_name='Custom Query')),
                ('unit', models.CharField(blank=True, help_text='Unit of measurement (e.g., $, %, units)', max_length=20, verbose_name='Unit')),
                ('target_value', models.DecimalField(blank=True, decimal_places=2, help_text='Target value for this KPI', max_digits=15, null=True, verbose_name='Target Value')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'KPI Metric',
                'verbose_name_plural': 'KPI Metrics',
                'ordering': ['metric_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Alert Name')),
                ('alert_type', models.CharField(choices=[('threshold', 'Threshold Alert'), ('trend', 'Trend Alert'), ('anomaly', 'Anomaly Detection'), ('forecast', 'Forecast Alert'), ('comparison', 'Comparison Alert')], max_length=20, verbose_name='Alert Type')),
                ('condition', models.JSONField(help_text='JSON object defining when this alert should trigger', verbose_name='Alert Condition')),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10, verbose_name='Severity Level')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('last_triggered', models.DateTimeField(blank=True, null=True, verbose_name='Last Triggered')),
                ('trigger_count', models.IntegerField(default=0, verbose_name='Trigger Count')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recipients', models.ManyToManyField(related_name='analytics_alerts', to=settings.AUTH_USER_MODEL, verbose_name='Alert Recipients')),
                ('store', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='settings_app.store', verbose_name='Store')),
                ('metric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='analytics.kpimetric', verbose_name='KPI Metric')),
            ],
            options={
                'verbose_name': 'Analytics Alert',
                'verbose_name_plural': 'Analytics Alerts',
                'ordering': ['severity', 'name'],
            },
        ),
        migrations.CreateModel(
            name='AlertInstance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('triggered_value', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Triggered Value')),
                ('message', models.TextField(verbose_name='Alert Message')),
                ('is_acknowledged', models.BooleanField(default=False, verbose_name='Is Acknowledged')),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True, verbose_name='Acknowledged At')),
                ('triggered_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Triggered At')),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_alerts', to=settings.AUTH_USER_MODEL, verbose_name='Acknowledged By')),
                ('alert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='analytics.alert', verbose_name='Alert')),
            ],
            options={
                'verbose_name': 'Alert Instance',
                'verbose_name_plural': 'Alert Instances',
                'ordering': ['-triggered_at'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalComparativeAnalysis',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Analysis Name')),
                ('comparison_type', models.CharField(choices=[('store_vs_store', 'Store vs Store'), ('period_vs_period', 'Period vs Period'), ('actual_vs_target', 'Actual vs Target'), ('actual_vs_forecast', 'Actual vs Forecast'), ('category_comparison', 'Category Comparison')], max_length=20, verbose_name='Comparison Type')),
                ('comparison_config', models.JSONField(help_text='JSON configuration for the comparison parameters', verbose_name='Comparison Configuration')),
                ('results', models.JSONField(default=dict, help_text='JSON object containing comparison results and insights', verbose_name='Analysis Results')),
                ('insights', models.TextField(blank=True, help_text='Automatically generated insights from the analysis', verbose_name='Key Insights')),
                ('analysis_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Analysis Date')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Comparative Analysis',
                'verbose_name_plural': 'historical Comparative Analyses',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDashboard',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Dashboard Name')),
                ('dashboard_type', models.CharField(choices=[('executive', 'Executive Dashboard'), ('sales', 'Sales Dashboard'), ('inventory', 'Inventory Dashboard'), ('financial', 'Financial Dashboard'), ('store_performance', 'Store Performance Dashboard'), ('custom', 'Custom Dashboard')], max_length=20, verbose_name='Dashboard Type')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_public', models.BooleanField(default=False, help_text='Whether this dashboard is visible to all users', verbose_name='Is Public')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default dashboard for its type', verbose_name='Is Default')),
                ('layout_config', models.JSONField(default=dict, help_text='JSON configuration for dashboard layout and widgets', verbose_name='Layout Configuration')),
                ('refresh_interval', models.IntegerField(default=300, help_text='How often dashboard data should refresh', verbose_name='Refresh Interval (seconds)')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Dashboard Owner')),
            ],
            options={
                'verbose_name': 'historical Dashboard',
                'verbose_name_plural': 'historical Dashboards',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalKPIMetric',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Metric Name')),
                ('metric_type', models.CharField(choices=[('revenue', 'Revenue'), ('profit', 'Profit'), ('sales_volume', 'Sales Volume'), ('customer_count', 'Customer Count'), ('inventory_turnover', 'Inventory Turnover'), ('average_transaction', 'Average Transaction Value'), ('conversion_rate', 'Conversion Rate'), ('growth_rate', 'Growth Rate'), ('margin', 'Profit Margin'), ('custom', 'Custom Metric')], max_length=20, verbose_name='Metric Type')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('calculation_method', models.CharField(choices=[('sum', 'Sum'), ('average', 'Average'), ('count', 'Count'), ('percentage', 'Percentage'), ('ratio', 'Ratio'), ('custom_query', 'Custom Query')], max_length=20, verbose_name='Calculation Method')),
                ('source_model', models.CharField(help_text='Django model to query for this metric', max_length=100, verbose_name='Source Model')),
                ('source_field', models.CharField(blank=True, help_text='Field to aggregate (if applicable)', max_length=100, verbose_name='Source Field')),
                ('filter_conditions', models.JSONField(default=dict, help_text='JSON object with filter conditions for the query', verbose_name='Filter Conditions')),
                ('custom_query', models.TextField(blank=True, help_text='Custom SQL query for complex metrics', verbose_name='Custom Query')),
                ('unit', models.CharField(blank=True, help_text='Unit of measurement (e.g., $, %, units)', max_length=20, verbose_name='Unit')),
                ('target_value', models.DecimalField(blank=True, decimal_places=2, help_text='Target value for this KPI', max_digits=15, null=True, verbose_name='Target Value')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical KPI Metric',
                'verbose_name_plural': 'historical KPI Metrics',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTrendAnalysis',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('trend_type', models.CharField(choices=[('linear', 'Linear Trend'), ('exponential', 'Exponential Trend'), ('seasonal', 'Seasonal Trend'), ('cyclical', 'Cyclical Trend')], max_length=20, verbose_name='Trend Type')),
                ('forecast_method', models.CharField(choices=[('linear_regression', 'Linear Regression'), ('moving_average', 'Moving Average'), ('exponential_smoothing', 'Exponential Smoothing'), ('seasonal_decomposition', 'Seasonal Decomposition')], max_length=30, verbose_name='Forecast Method')),
                ('analysis_period_days', models.IntegerField(default=90, help_text='Number of days of historical data to analyze', verbose_name='Analysis Period (Days)')),
                ('forecast_period_days', models.IntegerField(default=30, help_text='Number of days to forecast into the future', verbose_name='Forecast Period (Days)')),
                ('trend_direction', models.CharField(choices=[('increasing', 'Increasing'), ('decreasing', 'Decreasing'), ('stable', 'Stable'), ('volatile', 'Volatile')], max_length=20, verbose_name='Trend Direction')),
                ('trend_strength', models.DecimalField(decimal_places=2, help_text='Strength of the trend (0-100)', max_digits=5, verbose_name='Trend Strength')),
                ('forecast_accuracy', models.DecimalField(blank=True, decimal_places=2, help_text='Accuracy of previous forecasts', max_digits=5, null=True, verbose_name='Forecast Accuracy (%)')),
                ('forecast_data', models.JSONField(default=dict, help_text='JSON object containing forecast values and confidence intervals', verbose_name='Forecast Data')),
                ('analysis_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Analysis Date')),
                ('next_analysis_date', models.DateTimeField(verbose_name='Next Analysis Date')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('store', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='settings_app.store', verbose_name='Store')),
                ('metric', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='analytics.kpimetric', verbose_name='KPI Metric')),
            ],
            options={
                'verbose_name': 'historical Trend Analysis',
                'verbose_name_plural': 'historical Trend Analyses',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalAlert',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Alert Name')),
                ('alert_type', models.CharField(choices=[('threshold', 'Threshold Alert'), ('trend', 'Trend Alert'), ('anomaly', 'Anomaly Detection'), ('forecast', 'Forecast Alert'), ('comparison', 'Comparison Alert')], max_length=20, verbose_name='Alert Type')),
                ('condition', models.JSONField(help_text='JSON object defining when this alert should trigger', verbose_name='Alert Condition')),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=10, verbose_name='Severity Level')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('last_triggered', models.DateTimeField(blank=True, null=True, verbose_name='Last Triggered')),
                ('trigger_count', models.IntegerField(default=0, verbose_name='Trigger Count')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('store', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='settings_app.store', verbose_name='Store')),
                ('metric', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='analytics.kpimetric', verbose_name='KPI Metric')),
            ],
            options={
                'verbose_name': 'historical Analytics Alert',
                'verbose_name_plural': 'historical Analytics Alerts',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='ComparativeAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Analysis Name')),
                ('comparison_type', models.CharField(choices=[('store_vs_store', 'Store vs Store'), ('period_vs_period', 'Period vs Period'), ('actual_vs_target', 'Actual vs Target'), ('actual_vs_forecast', 'Actual vs Forecast'), ('category_comparison', 'Category Comparison')], max_length=20, verbose_name='Comparison Type')),
                ('comparison_config', models.JSONField(help_text='JSON configuration for the comparison parameters', verbose_name='Comparison Configuration')),
                ('results', models.JSONField(default=dict, help_text='JSON object containing comparison results and insights', verbose_name='Analysis Results')),
                ('insights', models.TextField(blank=True, help_text='Automatically generated insights from the analysis', verbose_name='Key Insights')),
                ('analysis_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Analysis Date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparative_analyses', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('metrics', models.ManyToManyField(related_name='comparative_analyses', to='analytics.kpimetric', verbose_name='Metrics to Compare')),
            ],
            options={
                'verbose_name': 'Comparative Analysis',
                'verbose_name_plural': 'Comparative Analyses',
                'ordering': ['-analysis_date'],
            },
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Dashboard Name')),
                ('dashboard_type', models.CharField(choices=[('executive', 'Executive Dashboard'), ('sales', 'Sales Dashboard'), ('inventory', 'Inventory Dashboard'), ('financial', 'Financial Dashboard'), ('store_performance', 'Store Performance Dashboard'), ('custom', 'Custom Dashboard')], max_length=20, verbose_name='Dashboard Type')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_public', models.BooleanField(default=False, help_text='Whether this dashboard is visible to all users', verbose_name='Is Public')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default dashboard for its type', verbose_name='Is Default')),
                ('layout_config', models.JSONField(default=dict, help_text='JSON configuration for dashboard layout and widgets', verbose_name='Layout Configuration')),
                ('refresh_interval', models.IntegerField(default=300, help_text='How often dashboard data should refresh', verbose_name='Refresh Interval (seconds)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_dashboards', to=settings.AUTH_USER_MODEL, verbose_name='Dashboard Owner')),
            ],
            options={
                'verbose_name': 'Dashboard',
                'verbose_name_plural': 'Dashboards',
                'ordering': ['dashboard_type', 'name'],
                'indexes': [models.Index(fields=['dashboard_type', 'is_public'], name='dashboard_type_public_idx'), models.Index(fields=['owner', 'dashboard_type'], name='dashboard_owner_type_idx')],
            },
        ),
        migrations.CreateModel(
            name='MetricSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.DecimalField(decimal_places=2, max_digits=15, verbose_name='Metric Value')),
                ('period_start', models.DateTimeField(verbose_name='Period Start')),
                ('period_end', models.DateTimeField(verbose_name='Period End')),
                ('snapshot_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Snapshot Date')),
                ('metadata', models.JSONField(default=dict, help_text='Additional data about this metric snapshot', verbose_name='Metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('metric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='snapshots', to='analytics.kpimetric', verbose_name='KPI Metric')),
                ('store', models.ForeignKey(blank=True, help_text='Store this metric applies to (null for company-wide)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='metric_snapshots', to='settings_app.store', verbose_name='Store')),
            ],
            options={
                'verbose_name': 'Metric Snapshot',
                'verbose_name_plural': 'Metric Snapshots',
                'ordering': ['-snapshot_date'],
                'indexes': [models.Index(fields=['metric', 'snapshot_date'], name='metric_snapshot_date_idx'), models.Index(fields=['store', 'snapshot_date'], name='store_snapshot_date_idx'), models.Index(fields=['period_start', 'period_end'], name='snapshot_period_idx')],
            },
        ),
        migrations.CreateModel(
            name='TrendAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trend_type', models.CharField(choices=[('linear', 'Linear Trend'), ('exponential', 'Exponential Trend'), ('seasonal', 'Seasonal Trend'), ('cyclical', 'Cyclical Trend')], max_length=20, verbose_name='Trend Type')),
                ('forecast_method', models.CharField(choices=[('linear_regression', 'Linear Regression'), ('moving_average', 'Moving Average'), ('exponential_smoothing', 'Exponential Smoothing'), ('seasonal_decomposition', 'Seasonal Decomposition')], max_length=30, verbose_name='Forecast Method')),
                ('analysis_period_days', models.IntegerField(default=90, help_text='Number of days of historical data to analyze', verbose_name='Analysis Period (Days)')),
                ('forecast_period_days', models.IntegerField(default=30, help_text='Number of days to forecast into the future', verbose_name='Forecast Period (Days)')),
                ('trend_direction', models.CharField(choices=[('increasing', 'Increasing'), ('decreasing', 'Decreasing'), ('stable', 'Stable'), ('volatile', 'Volatile')], max_length=20, verbose_name='Trend Direction')),
                ('trend_strength', models.DecimalField(decimal_places=2, help_text='Strength of the trend (0-100)', max_digits=5, verbose_name='Trend Strength')),
                ('forecast_accuracy', models.DecimalField(blank=True, decimal_places=2, help_text='Accuracy of previous forecasts', max_digits=5, null=True, verbose_name='Forecast Accuracy (%)')),
                ('forecast_data', models.JSONField(default=dict, help_text='JSON object containing forecast values and confidence intervals', verbose_name='Forecast Data')),
                ('analysis_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Analysis Date')),
                ('next_analysis_date', models.DateTimeField(verbose_name='Next Analysis Date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('metric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trend_analyses', to='analytics.kpimetric', verbose_name='KPI Metric')),
                ('store', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trend_analyses', to='settings_app.store', verbose_name='Store')),
            ],
            options={
                'verbose_name': 'Trend Analysis',
                'verbose_name_plural': 'Trend Analyses',
                'ordering': ['-analysis_date'],
                'indexes': [models.Index(fields=['metric', 'analysis_date'], name='trend_metric_date_idx'), models.Index(fields=['store', 'analysis_date'], name='trend_store_date_idx')],
            },
        ),
    ]
