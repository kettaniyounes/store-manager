# Generated by Django 5.2 on 2025-08-29 07:29

import django.db.models.deletion
import django.utils.timezone
import simple_history.models
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('customers', '0001_initial'),
        ('products', '0002_initial'),
        ('settings_app', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Payment Method Name')),
                ('description', models.TextField(blank=True, help_text='Optional description of the payment method', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if this payment method is currently active', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Payment Method',
                'verbose_name_plural': 'Payment Methods',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FinancialPeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the financial period (e.g., "Q1 2024", "January 2024")', max_length=255, verbose_name='Period Name')),
                ('period_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly'), ('custom', 'Custom Period')], max_length=20, verbose_name='Period Type')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(verbose_name='End Date')),
                ('is_closed', models.BooleanField(default=False, help_text='Indicates if this period is closed for reporting', verbose_name='Is Closed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('store', models.ForeignKey(blank=True, help_text='Store location for this period (null for company-wide periods)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='financial_periods', to='settings_app.store', verbose_name='Store Location')),
            ],
            options={
                'verbose_name': 'Financial Period',
                'verbose_name_plural': 'Financial Periods',
                'ordering': ['-start_date'],
                'unique_together': {('period_type', 'start_date', 'end_date', 'store')},
            },
        ),
        migrations.CreateModel(
            name='HistoricalFinancialPeriod',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the financial period (e.g., "Q1 2024", "January 2024")', max_length=255, verbose_name='Period Name')),
                ('period_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly'), ('custom', 'Custom Period')], max_length=20, verbose_name='Period Type')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(verbose_name='End Date')),
                ('is_closed', models.BooleanField(default=False, help_text='Indicates if this period is closed for reporting', verbose_name='Is Closed')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('store', models.ForeignKey(blank=True, db_constraint=False, help_text='Store location for this period (null for company-wide periods)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='settings_app.store', verbose_name='Store Location')),
            ],
            options={
                'verbose_name': 'historical Financial Period',
                'verbose_name_plural': 'historical Financial Periods',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPaymentMethod',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='Payment Method Name')),
                ('description', models.TextField(blank=True, help_text='Optional description of the payment method', verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if this payment method is currently active', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Payment Method',
                'verbose_name_plural': 'historical Payment Methods',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalProfitLossReport',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('total_revenue', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Total Revenue')),
                ('total_cogs', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Total Cost of Goods Sold')),
                ('gross_profit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Gross Profit')),
                ('total_discounts', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Total Discounts Given')),
                ('total_taxes_collected', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Total Taxes Collected')),
                ('net_profit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Net Profit')),
                ('profit_margin_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, verbose_name='Profit Margin %')),
                ('transaction_count', models.IntegerField(default=0, verbose_name='Number of Transactions')),
                ('average_transaction_value', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Average Transaction Value')),
                ('generated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Generated At')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('period', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sales.financialperiod', verbose_name='Financial Period')),
                ('store', models.ForeignKey(blank=True, db_constraint=False, help_text='Store location for this report (null for company-wide reports)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='settings_app.store', verbose_name='Store Location')),
            ],
            options={
                'verbose_name': 'historical Profit & Loss Report',
                'verbose_name_plural': 'historical Profit & Loss Reports',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSalesAnalytics',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('total_sales_volume', models.IntegerField(default=0, verbose_name='Total Items Sold')),
                ('average_items_per_transaction', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, verbose_name='Average Items per Transaction')),
                ('unique_customers', models.IntegerField(default=0, verbose_name='Unique Customers')),
                ('new_customers', models.IntegerField(default=0, verbose_name='New Customers')),
                ('repeat_customers', models.IntegerField(default=0, verbose_name='Repeat Customers')),
                ('cash_sales', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Cash Sales')),
                ('card_sales', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Card Sales')),
                ('other_payment_sales', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Other Payment Methods')),
                ('top_selling_product_id', models.IntegerField(blank=True, null=True, verbose_name='Top Selling Product ID')),
                ('top_selling_category_id', models.IntegerField(blank=True, null=True, verbose_name='Top Selling Category ID')),
                ('best_salesperson_id', models.IntegerField(blank=True, null=True, verbose_name='Best Salesperson ID')),
                ('generated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Generated At')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('period', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sales.financialperiod', verbose_name='Financial Period')),
                ('store', models.ForeignKey(blank=True, db_constraint=False, help_text='Store location for this analytics report (null for company-wide)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='settings_app.store', verbose_name='Store Location')),
            ],
            options={
                'verbose_name': 'historical Sales Analytics',
                'verbose_name_plural': 'historical Sales Analytics',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalTaxReport',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('total_taxable_sales', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Total Taxable Sales')),
                ('total_tax_collected', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Total Tax Collected')),
                ('tax_exempt_sales', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Tax Exempt Sales')),
                ('average_tax_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, verbose_name='Average Tax Rate %')),
                ('tax_by_rate', models.JSONField(default=dict, help_text='JSON object containing tax amounts by rate', verbose_name='Tax Breakdown by Rate')),
                ('generated_at', models.DateTimeField(blank=True, editable=False, verbose_name='Generated At')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('period', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sales.financialperiod', verbose_name='Financial Period')),
                ('store', models.ForeignKey(blank=True, db_constraint=False, help_text='Store location for this tax report (null for company-wide)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='settings_app.store', verbose_name='Store Location')),
            ],
            options={
                'verbose_name': 'historical Tax Report',
                'verbose_name_plural': 'historical Tax Reports',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSaleTransaction',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('transaction_id', models.CharField(db_index=True, default=uuid.uuid4, help_text='Unique transaction identifier (e.g., receipt number)', max_length=100, verbose_name='Transaction ID')),
                ('sale_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time of the sale transaction', verbose_name='Sale Date & Time')),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total amount of the sale transaction (calculated)', max_digits=10, verbose_name='Total Amount')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total discount applied to the transaction', max_digits=10, verbose_name='Discount Amount')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total tax amount for the transaction', max_digits=10, verbose_name='Tax Amount')),
                ('total_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total cost of goods sold for this transaction', max_digits=10, verbose_name='Total Cost')),
                ('gross_profit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Gross profit for this transaction (revenue - COGS)', max_digits=10, verbose_name='Gross Profit')),
                ('profit_margin_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Profit margin percentage for this transaction', max_digits=5, verbose_name='Profit Margin %')),
                ('status', models.CharField(choices=[('completed', 'Completed'), ('voided', 'Voided')], default='completed', help_text='Indicates whether the sale is completed or voided', max_length=20, verbose_name='Status')),
                ('notes', models.TextField(blank=True, help_text='Optional notes or comments for this transaction', verbose_name='Notes')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('customer', models.ForeignKey(blank=True, db_constraint=False, help_text='Optional customer associated with this sale', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='customers.customer', verbose_name='Customer')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('salesperson', models.ForeignKey(blank=True, db_constraint=False, help_text='Optional salesperson who processed this sale', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Salesperson')),
                ('store', models.ForeignKey(blank=True, db_constraint=False, help_text='Store location where this sale was processed', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='settings_app.store', verbose_name='Store Location')),
                ('payment_method', models.ForeignKey(blank=True, db_constraint=False, help_text='Payment method used for this transaction', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sales.paymentmethod', verbose_name='Payment Method')),
            ],
            options={
                'verbose_name': 'historical Sale Transaction',
                'verbose_name_plural': 'historical Sale Transactions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='SaleTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_id', models.CharField(default=uuid.uuid4, help_text='Unique transaction identifier (e.g., receipt number)', max_length=100, unique=True, verbose_name='Transaction ID')),
                ('sale_date', models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time of the sale transaction', verbose_name='Sale Date & Time')),
                ('total_amount', models.DecimalField(decimal_places=2, help_text='Total amount of the sale transaction (calculated)', max_digits=10, verbose_name='Total Amount')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total discount applied to the transaction', max_digits=10, verbose_name='Discount Amount')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total tax amount for the transaction', max_digits=10, verbose_name='Tax Amount')),
                ('total_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total cost of goods sold for this transaction', max_digits=10, verbose_name='Total Cost')),
                ('gross_profit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Gross profit for this transaction (revenue - COGS)', max_digits=10, verbose_name='Gross Profit')),
                ('profit_margin_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Profit margin percentage for this transaction', max_digits=5, verbose_name='Profit Margin %')),
                ('status', models.CharField(choices=[('completed', 'Completed'), ('voided', 'Voided')], default='completed', help_text='Indicates whether the sale is completed or voided', max_length=20, verbose_name='Status')),
                ('notes', models.TextField(blank=True, help_text='Optional notes or comments for this transaction', verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(blank=True, help_text='Optional customer associated with this sale', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sale_transactions', to='customers.customer', verbose_name='Customer')),
                ('payment_method', models.ForeignKey(help_text='Payment method used for this transaction', on_delete=django.db.models.deletion.PROTECT, related_name='sale_transactions', to='sales.paymentmethod', verbose_name='Payment Method')),
                ('salesperson', models.ForeignKey(blank=True, help_text='Optional salesperson who processed this sale', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sale_transactions', to=settings.AUTH_USER_MODEL, verbose_name='Salesperson')),
                ('store', models.ForeignKey(help_text='Store location where this sale was processed', on_delete=django.db.models.deletion.PROTECT, related_name='sale_transactions', to='settings_app.store', verbose_name='Store Location')),
            ],
            options={
                'verbose_name': 'Sale Transaction',
                'verbose_name_plural': 'Sale Transactions',
                'ordering': ['-sale_date'],
            },
        ),
        migrations.CreateModel(
            name='SaleItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(help_text='Quantity of the product sold', verbose_name='Quantity')),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit at the time of sale', max_digits=10, verbose_name='Unit Price')),
                ('unit_cost', models.DecimalField(decimal_places=2, help_text='Cost per unit at the time of sale (for COGS calculation)', max_digits=10, verbose_name='Unit Cost')),
                ('total_cost', models.DecimalField(decimal_places=2, help_text='Total cost for this line item (quantity × unit cost)', max_digits=10, verbose_name='Total Cost')),
                ('gross_profit', models.DecimalField(decimal_places=2, help_text='Gross profit for this line item (line total - total cost)', max_digits=10, verbose_name='Gross Profit')),
                ('profit_margin_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Profit margin percentage for this line item', max_digits=5, verbose_name='Profit Margin %')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount applied to this sale item', max_digits=10, verbose_name='Discount Amount')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Tax amount for this sale item', max_digits=10, verbose_name='Tax Amount')),
                ('line_total', models.DecimalField(decimal_places=2, help_text='Total price for this sale item (calculated)', max_digits=10, verbose_name='Line Total')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sale_items', to='products.product', verbose_name='Product')),
                ('product_variant', models.ForeignKey(blank=True, help_text='Optional product variant if applicable', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sale_items', to='products.productvariant', verbose_name='Product Variant')),
                ('store', models.ForeignKey(help_text='Store location where this item was sold from (for inventory tracking)', on_delete=django.db.models.deletion.PROTECT, related_name='sale_items', to='settings_app.store', verbose_name='Store Location')),
                ('sale_transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sale_items', to='sales.saletransaction', verbose_name='Sale Transaction')),
            ],
            options={
                'verbose_name': 'Sale Item',
                'verbose_name_plural': 'Sale Items',
            },
        ),
        migrations.CreateModel(
            name='HistoricalSaleItem',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('quantity', models.IntegerField(help_text='Quantity of the product sold', verbose_name='Quantity')),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit at the time of sale', max_digits=10, verbose_name='Unit Price')),
                ('unit_cost', models.DecimalField(decimal_places=2, help_text='Cost per unit at the time of sale (for COGS calculation)', max_digits=10, verbose_name='Unit Cost')),
                ('total_cost', models.DecimalField(decimal_places=2, help_text='Total cost for this line item (quantity × unit cost)', max_digits=10, verbose_name='Total Cost')),
                ('gross_profit', models.DecimalField(decimal_places=2, help_text='Gross profit for this line item (line total - total cost)', max_digits=10, verbose_name='Gross Profit')),
                ('profit_margin_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Profit margin percentage for this line item', max_digits=5, verbose_name='Profit Margin %')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Discount applied to this sale item', max_digits=10, verbose_name='Discount Amount')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Tax amount for this sale item', max_digits=10, verbose_name='Tax Amount')),
                ('line_total', models.DecimalField(decimal_places=2, help_text='Total price for this sale item (calculated)', max_digits=10, verbose_name='Line Total')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='products.product', verbose_name='Product')),
                ('product_variant', models.ForeignKey(blank=True, db_constraint=False, help_text='Optional product variant if applicable', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='products.productvariant', verbose_name='Product Variant')),
                ('store', models.ForeignKey(blank=True, db_constraint=False, help_text='Store location where this item was sold from (for inventory tracking)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='settings_app.store', verbose_name='Store Location')),
                ('sale_transaction', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sales.saletransaction', verbose_name='Sale Transaction')),
            ],
            options={
                'verbose_name': 'historical Sale Item',
                'verbose_name_plural': 'historical Sale Items',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='TaxReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_taxable_sales', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Total Taxable Sales')),
                ('total_tax_collected', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Total Tax Collected')),
                ('tax_exempt_sales', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Tax Exempt Sales')),
                ('average_tax_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, verbose_name='Average Tax Rate %')),
                ('tax_by_rate', models.JSONField(default=dict, help_text='JSON object containing tax amounts by rate', verbose_name='Tax Breakdown by Rate')),
                ('generated_at', models.DateTimeField(auto_now_add=True, verbose_name='Generated At')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tax_reports', to='sales.financialperiod', verbose_name='Financial Period')),
                ('store', models.ForeignKey(blank=True, help_text='Store location for this tax report (null for company-wide)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tax_reports', to='settings_app.store', verbose_name='Store Location')),
            ],
            options={
                'verbose_name': 'Tax Report',
                'verbose_name_plural': 'Tax Reports',
                'ordering': ['-generated_at'],
            },
        ),
        migrations.CreateModel(
            name='ProfitLossReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_revenue', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Total Revenue')),
                ('total_cogs', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Total Cost of Goods Sold')),
                ('gross_profit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Gross Profit')),
                ('total_discounts', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Total Discounts Given')),
                ('total_taxes_collected', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Total Taxes Collected')),
                ('net_profit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Net Profit')),
                ('profit_margin_percentage', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, verbose_name='Profit Margin %')),
                ('transaction_count', models.IntegerField(default=0, verbose_name='Number of Transactions')),
                ('average_transaction_value', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, verbose_name='Average Transaction Value')),
                ('generated_at', models.DateTimeField(auto_now_add=True, verbose_name='Generated At')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profit_loss_reports', to='sales.financialperiod', verbose_name='Financial Period')),
                ('store', models.ForeignKey(blank=True, help_text='Store location for this report (null for company-wide reports)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profit_loss_reports', to='settings_app.store', verbose_name='Store Location')),
            ],
            options={
                'verbose_name': 'Profit & Loss Report',
                'verbose_name_plural': 'Profit & Loss Reports',
                'ordering': ['-generated_at'],
                'unique_together': {('period', 'store')},
            },
        ),
        migrations.CreateModel(
            name='SalesAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_sales_volume', models.IntegerField(default=0, verbose_name='Total Items Sold')),
                ('average_items_per_transaction', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, verbose_name='Average Items per Transaction')),
                ('unique_customers', models.IntegerField(default=0, verbose_name='Unique Customers')),
                ('new_customers', models.IntegerField(default=0, verbose_name='New Customers')),
                ('repeat_customers', models.IntegerField(default=0, verbose_name='Repeat Customers')),
                ('cash_sales', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Cash Sales')),
                ('card_sales', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Card Sales')),
                ('other_payment_sales', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, verbose_name='Other Payment Methods')),
                ('top_selling_product_id', models.IntegerField(blank=True, null=True, verbose_name='Top Selling Product ID')),
                ('top_selling_category_id', models.IntegerField(blank=True, null=True, verbose_name='Top Selling Category ID')),
                ('best_salesperson_id', models.IntegerField(blank=True, null=True, verbose_name='Best Salesperson ID')),
                ('generated_at', models.DateTimeField(auto_now_add=True, verbose_name='Generated At')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales_analytics', to='sales.financialperiod', verbose_name='Financial Period')),
                ('store', models.ForeignKey(blank=True, help_text='Store location for this analytics report (null for company-wide)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sales_analytics', to='settings_app.store', verbose_name='Store Location')),
            ],
            options={
                'verbose_name': 'Sales Analytics',
                'verbose_name_plural': 'Sales Analytics',
                'ordering': ['-generated_at'],
                'unique_together': {('period', 'store')},
            },
        ),
        migrations.AddIndex(
            model_name='saletransaction',
            index=models.Index(fields=['sale_date', 'status'], name='sale_date_status_idx'),
        ),
        migrations.AddIndex(
            model_name='saletransaction',
            index=models.Index(fields=['salesperson', 'sale_date'], name='salesperson_date_idx'),
        ),
        migrations.AddIndex(
            model_name='saletransaction',
            index=models.Index(fields=['customer', 'sale_date'], name='customer_date_idx'),
        ),
        migrations.AddIndex(
            model_name='saletransaction',
            index=models.Index(fields=['store', 'sale_date'], name='store_sale_date_idx'),
        ),
        migrations.AddIndex(
            model_name='saletransaction',
            index=models.Index(fields=['store', 'status'], name='store_status_idx'),
        ),
        migrations.AddIndex(
            model_name='saleitem',
            index=models.Index(fields=['store', 'product'], name='saleitem_store_product_idx'),
        ),
        migrations.AddIndex(
            model_name='saleitem',
            index=models.Index(fields=['store', 'created_at'], name='saleitem_store_date_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='taxreport',
            unique_together={('period', 'store')},
        ),
    ]
