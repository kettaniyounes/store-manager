# Generated by Django 5.2 on 2025-09-02 17:44

import django.db.models.deletion
import simple_history.models
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomerSegment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=255, unique=True, verbose_name="Segment Name"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "segment_type",
                    models.CharField(
                        choices=[
                            ("demographic", "Demographic"),
                            ("behavioral", "Behavioral"),
                            ("geographic", "Geographic"),
                            ("psychographic", "Psychographic"),
                            ("value_based", "Value-Based"),
                            ("custom", "Custom"),
                        ],
                        default="behavioral",
                        max_length=20,
                        verbose_name="Segment Type",
                    ),
                ),
                (
                    "min_total_spent",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Minimum Total Spent",
                    ),
                ),
                (
                    "max_total_spent",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Maximum Total Spent",
                    ),
                ),
                (
                    "min_purchase_frequency",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Minimum Purchase Frequency (per year)",
                    ),
                ),
                (
                    "min_avg_order_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Minimum Average Order Value",
                    ),
                ),
                (
                    "days_since_last_purchase",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Days Since Last Purchase (max)",
                    ),
                ),
                (
                    "discount_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=5,
                        verbose_name="Default Discount %",
                    ),
                ),
                (
                    "loyalty_points_multiplier",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("1.00"),
                        max_digits=3,
                        verbose_name="Loyalty Points Multiplier",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
            ],
            options={
                "verbose_name": "Customer Segment",
                "verbose_name_plural": "Customer Segments",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="LoyaltyProgram",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=255, unique=True, verbose_name="Program Name"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "points_per_dollar",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("1.00"),
                        max_digits=5,
                        verbose_name="Points per Dollar Spent",
                    ),
                ),
                (
                    "points_value",
                    models.DecimalField(
                        decimal_places=4,
                        default=Decimal("0.0100"),
                        help_text="How much each point is worth in currency",
                        max_digits=5,
                        verbose_name="Point Value (in currency)",
                    ),
                ),
                (
                    "min_points_redemption",
                    models.IntegerField(
                        default=100, verbose_name="Minimum Points for Redemption"
                    ),
                ),
                (
                    "max_points_per_transaction",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Maximum Points per Transaction",
                    ),
                ),
                (
                    "points_expiry_days",
                    models.IntegerField(
                        blank=True,
                        help_text="Days after which points expire (null = never expire)",
                        null=True,
                        verbose_name="Points Expiry (Days)",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "birthday_bonus_multiplier",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("2.00"),
                        max_digits=3,
                        verbose_name="Birthday Bonus Multiplier",
                    ),
                ),
                (
                    "referral_bonus_points",
                    models.IntegerField(
                        default=500, verbose_name="Referral Bonus Points"
                    ),
                ),
            ],
            options={
                "verbose_name": "Loyalty Program",
                "verbose_name_plural": "Loyalty Programs",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Customer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, verbose_name="Customer Name"),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Customer's phone number (optional)",
                        max_length=20,
                        verbose_name="Phone Number",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        db_index=True,
                        help_text="Customer's email address (optional)",
                        max_length=254,
                        verbose_name="Email Address",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True,
                        help_text="Customer's address (optional)",
                        verbose_name="Address",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Any additional notes about the customer (optional)",
                        verbose_name="Notes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Customer",
                "verbose_name_plural": "Customers",
                "ordering": ["name"],
                "indexes": [
                    models.Index(fields=["name"], name="customer_name_idx"),
                    models.Index(fields=["phone_number"], name="customer_phone_idx"),
                    models.Index(fields=["email"], name="customer_email_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="CustomerLoyaltyAccount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "current_points",
                    models.IntegerField(
                        default=0, verbose_name="Current Points Balance"
                    ),
                ),
                (
                    "lifetime_points_earned",
                    models.IntegerField(
                        default=0, verbose_name="Lifetime Points Earned"
                    ),
                ),
                (
                    "lifetime_points_redeemed",
                    models.IntegerField(
                        default=0, verbose_name="Lifetime Points Redeemed"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Account Active"),
                ),
                (
                    "enrollment_date",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Enrollment Date"
                    ),
                ),
                (
                    "last_activity_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Activity Date"
                    ),
                ),
                (
                    "birthday",
                    models.DateField(blank=True, null=True, verbose_name="Birthday"),
                ),
                (
                    "anniversary_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Anniversary Date"
                    ),
                ),
                (
                    "customer",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="loyalty_account",
                        to="customers.customer",
                        verbose_name="Customer",
                    ),
                ),
                (
                    "program",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="customer_accounts",
                        to="customers.loyaltyprogram",
                        verbose_name="Loyalty Program",
                    ),
                ),
            ],
            options={
                "verbose_name": "Customer Loyalty Account",
                "verbose_name_plural": "Customer Loyalty Accounts",
                "ordering": ["-current_points"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalCustomer",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, verbose_name="Customer Name"),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Customer's phone number (optional)",
                        max_length=20,
                        verbose_name="Phone Number",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        db_index=True,
                        help_text="Customer's email address (optional)",
                        max_length=254,
                        verbose_name="Email Address",
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True,
                        help_text="Customer's address (optional)",
                        verbose_name="Address",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Any additional notes about the customer (optional)",
                        verbose_name="Notes",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Customer",
                "verbose_name_plural": "historical Customers",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalCustomerProfile",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "total_spent",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=12,
                        verbose_name="Total Amount Spent",
                    ),
                ),
                (
                    "total_orders",
                    models.IntegerField(
                        default=0, verbose_name="Total Number of Orders"
                    ),
                ),
                (
                    "average_order_value",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=10,
                        verbose_name="Average Order Value",
                    ),
                ),
                (
                    "last_purchase_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Purchase Date"
                    ),
                ),
                (
                    "first_purchase_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="First Purchase Date"
                    ),
                ),
                (
                    "tier",
                    models.CharField(
                        choices=[
                            ("bronze", "Bronze"),
                            ("silver", "Silver"),
                            ("gold", "Gold"),
                            ("platinum", "Platinum"),
                            ("vip", "VIP"),
                        ],
                        default="bronze",
                        max_length=20,
                        verbose_name="Customer Tier",
                    ),
                ),
                (
                    "is_vip",
                    models.BooleanField(default=False, verbose_name="VIP Status"),
                ),
                (
                    "preferred_contact_method",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("phone", "Phone"),
                            ("sms", "SMS"),
                            ("none", "No Contact"),
                        ],
                        default="email",
                        max_length=20,
                        verbose_name="Preferred Contact Method",
                    ),
                ),
                (
                    "marketing_opt_in",
                    models.BooleanField(default=True, verbose_name="Marketing Opt-in"),
                ),
                (
                    "customer_lifetime_value",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=12,
                        verbose_name="Customer Lifetime Value (CLV)",
                    ),
                ),
                (
                    "purchase_frequency",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=5,
                        verbose_name="Purchase Frequency (per year)",
                    ),
                ),
                (
                    "days_since_last_purchase",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Days Since Last Purchase"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="customers.customer",
                        verbose_name="Customer",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "segment",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="customers.customersegment",
                        verbose_name="Customer Segment",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Customer Profile",
                "verbose_name_plural": "historical Customer Profiles",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalLoyaltyTransaction",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("purchase", "Purchase Earned"),
                            ("bonus", "Bonus Points"),
                            ("redemption", "Points Redemption"),
                            ("adjustment", "Manual Adjustment"),
                            ("expiry", "Points Expired"),
                            ("refund", "Refund Points"),
                            ("birthday", "Birthday Bonus"),
                            ("referral", "Referral Bonus"),
                        ],
                        max_length=20,
                        verbose_name="Transaction Type",
                    ),
                ),
                (
                    "points_change",
                    models.IntegerField(
                        help_text="Positive for earned, negative for redeemed",
                        verbose_name="Points Change",
                    ),
                ),
                (
                    "points_balance_after",
                    models.IntegerField(
                        verbose_name="Points Balance After Transaction"
                    ),
                ),
                (
                    "reference_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to related sale, redemption, etc.",
                        max_length=100,
                        verbose_name="Reference ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "transaction_date",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Transaction Date"
                    ),
                ),
                (
                    "expiry_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Points Expiry Date"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "loyalty_account",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="customers.customerloyaltyaccount",
                        verbose_name="Loyalty Account",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Loyalty Transaction",
                "verbose_name_plural": "historical Loyalty Transactions",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalPromotionalCampaign",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, verbose_name="Campaign Name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "campaign_type",
                    models.CharField(
                        choices=[
                            ("discount", "Discount Campaign"),
                            ("bogo", "Buy One Get One"),
                            ("loyalty_bonus", "Loyalty Bonus Points"),
                            ("seasonal", "Seasonal Promotion"),
                            ("clearance", "Clearance Sale"),
                            ("new_customer", "New Customer Offer"),
                            ("referral", "Referral Program"),
                        ],
                        max_length=20,
                        verbose_name="Campaign Type",
                    ),
                ),
                ("start_date", models.DateTimeField(verbose_name="Start Date")),
                ("end_date", models.DateTimeField(verbose_name="End Date")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("scheduled", "Scheduled"),
                            ("active", "Active"),
                            ("paused", "Paused"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="draft",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "target_all_customers",
                    models.BooleanField(
                        default=False, verbose_name="Target All Customers"
                    ),
                ),
                (
                    "discount_type",
                    models.CharField(
                        choices=[
                            ("percentage", "Percentage Discount"),
                            ("fixed_amount", "Fixed Amount Discount"),
                            ("bogo", "Buy One Get One"),
                            ("loyalty_points", "Bonus Loyalty Points"),
                        ],
                        default="percentage",
                        max_length=20,
                        verbose_name="Discount Type",
                    ),
                ),
                (
                    "discount_value",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=10,
                        verbose_name="Discount Value",
                    ),
                ),
                (
                    "max_uses_per_customer",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Max Uses per Customer"
                    ),
                ),
                (
                    "total_usage_limit",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Total Usage Limit"
                    ),
                ),
                (
                    "current_usage_count",
                    models.IntegerField(default=0, verbose_name="Current Usage Count"),
                ),
                (
                    "minimum_purchase_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Minimum Purchase Amount",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Promotional Campaign",
                "verbose_name_plural": "historical Promotional Campaigns",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalCustomerLoyaltyAccount",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "current_points",
                    models.IntegerField(
                        default=0, verbose_name="Current Points Balance"
                    ),
                ),
                (
                    "lifetime_points_earned",
                    models.IntegerField(
                        default=0, verbose_name="Lifetime Points Earned"
                    ),
                ),
                (
                    "lifetime_points_redeemed",
                    models.IntegerField(
                        default=0, verbose_name="Lifetime Points Redeemed"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Account Active"),
                ),
                (
                    "enrollment_date",
                    models.DateTimeField(
                        blank=True, editable=False, verbose_name="Enrollment Date"
                    ),
                ),
                (
                    "last_activity_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Activity Date"
                    ),
                ),
                (
                    "birthday",
                    models.DateField(blank=True, null=True, verbose_name="Birthday"),
                ),
                (
                    "anniversary_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Anniversary Date"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="customers.customer",
                        verbose_name="Customer",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "program",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="customers.loyaltyprogram",
                        verbose_name="Loyalty Program",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Customer Loyalty Account",
                "verbose_name_plural": "historical Customer Loyalty Accounts",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="LoyaltyTransaction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "transaction_type",
                    models.CharField(
                        choices=[
                            ("purchase", "Purchase Earned"),
                            ("bonus", "Bonus Points"),
                            ("redemption", "Points Redemption"),
                            ("adjustment", "Manual Adjustment"),
                            ("expiry", "Points Expired"),
                            ("refund", "Refund Points"),
                            ("birthday", "Birthday Bonus"),
                            ("referral", "Referral Bonus"),
                        ],
                        max_length=20,
                        verbose_name="Transaction Type",
                    ),
                ),
                (
                    "points_change",
                    models.IntegerField(
                        help_text="Positive for earned, negative for redeemed",
                        verbose_name="Points Change",
                    ),
                ),
                (
                    "points_balance_after",
                    models.IntegerField(
                        verbose_name="Points Balance After Transaction"
                    ),
                ),
                (
                    "reference_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to related sale, redemption, etc.",
                        max_length=100,
                        verbose_name="Reference ID",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "transaction_date",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Transaction Date"
                    ),
                ),
                (
                    "expiry_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Points Expiry Date"
                    ),
                ),
                (
                    "loyalty_account",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transactions",
                        to="customers.customerloyaltyaccount",
                        verbose_name="Loyalty Account",
                    ),
                ),
            ],
            options={
                "verbose_name": "Loyalty Transaction",
                "verbose_name_plural": "Loyalty Transactions",
                "ordering": ["-transaction_date"],
            },
        ),
        migrations.CreateModel(
            name="PromotionalCampaign",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=255, verbose_name="Campaign Name"),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="Description"),
                ),
                (
                    "campaign_type",
                    models.CharField(
                        choices=[
                            ("discount", "Discount Campaign"),
                            ("bogo", "Buy One Get One"),
                            ("loyalty_bonus", "Loyalty Bonus Points"),
                            ("seasonal", "Seasonal Promotion"),
                            ("clearance", "Clearance Sale"),
                            ("new_customer", "New Customer Offer"),
                            ("referral", "Referral Program"),
                        ],
                        max_length=20,
                        verbose_name="Campaign Type",
                    ),
                ),
                ("start_date", models.DateTimeField(verbose_name="Start Date")),
                ("end_date", models.DateTimeField(verbose_name="End Date")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("scheduled", "Scheduled"),
                            ("active", "Active"),
                            ("paused", "Paused"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="draft",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                (
                    "target_all_customers",
                    models.BooleanField(
                        default=False, verbose_name="Target All Customers"
                    ),
                ),
                (
                    "discount_type",
                    models.CharField(
                        choices=[
                            ("percentage", "Percentage Discount"),
                            ("fixed_amount", "Fixed Amount Discount"),
                            ("bogo", "Buy One Get One"),
                            ("loyalty_points", "Bonus Loyalty Points"),
                        ],
                        default="percentage",
                        max_length=20,
                        verbose_name="Discount Type",
                    ),
                ),
                (
                    "discount_value",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=10,
                        verbose_name="Discount Value",
                    ),
                ),
                (
                    "max_uses_per_customer",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Max Uses per Customer"
                    ),
                ),
                (
                    "total_usage_limit",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Total Usage Limit"
                    ),
                ),
                (
                    "current_usage_count",
                    models.IntegerField(default=0, verbose_name="Current Usage Count"),
                ),
                (
                    "minimum_purchase_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Minimum Purchase Amount",
                    ),
                ),
                (
                    "target_segments",
                    models.ManyToManyField(
                        blank=True,
                        related_name="campaigns",
                        to="customers.customersegment",
                        verbose_name="Target Customer Segments",
                    ),
                ),
            ],
            options={
                "verbose_name": "Promotional Campaign",
                "verbose_name_plural": "Promotional Campaigns",
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="CustomerProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "total_spent",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=12,
                        verbose_name="Total Amount Spent",
                    ),
                ),
                (
                    "total_orders",
                    models.IntegerField(
                        default=0, verbose_name="Total Number of Orders"
                    ),
                ),
                (
                    "average_order_value",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=10,
                        verbose_name="Average Order Value",
                    ),
                ),
                (
                    "last_purchase_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Purchase Date"
                    ),
                ),
                (
                    "first_purchase_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="First Purchase Date"
                    ),
                ),
                (
                    "tier",
                    models.CharField(
                        choices=[
                            ("bronze", "Bronze"),
                            ("silver", "Silver"),
                            ("gold", "Gold"),
                            ("platinum", "Platinum"),
                            ("vip", "VIP"),
                        ],
                        default="bronze",
                        max_length=20,
                        verbose_name="Customer Tier",
                    ),
                ),
                (
                    "is_vip",
                    models.BooleanField(default=False, verbose_name="VIP Status"),
                ),
                (
                    "preferred_contact_method",
                    models.CharField(
                        choices=[
                            ("email", "Email"),
                            ("phone", "Phone"),
                            ("sms", "SMS"),
                            ("none", "No Contact"),
                        ],
                        default="email",
                        max_length=20,
                        verbose_name="Preferred Contact Method",
                    ),
                ),
                (
                    "marketing_opt_in",
                    models.BooleanField(default=True, verbose_name="Marketing Opt-in"),
                ),
                (
                    "customer_lifetime_value",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=12,
                        verbose_name="Customer Lifetime Value (CLV)",
                    ),
                ),
                (
                    "purchase_frequency",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=5,
                        verbose_name="Purchase Frequency (per year)",
                    ),
                ),
                (
                    "days_since_last_purchase",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Days Since Last Purchase"
                    ),
                ),
                (
                    "customer",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to="customers.customer",
                        verbose_name="Customer",
                    ),
                ),
                (
                    "segment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="customers",
                        to="customers.customersegment",
                        verbose_name="Customer Segment",
                    ),
                ),
            ],
            options={
                "verbose_name": "Customer Profile",
                "verbose_name_plural": "Customer Profiles",
                "ordering": ["-total_spent"],
                "indexes": [
                    models.Index(fields=["tier"], name="customer_profile_tier_idx"),
                    models.Index(
                        fields=["total_spent"], name="customer_profile_spent_idx"
                    ),
                    models.Index(
                        fields=["last_purchase_date"],
                        name="customer_profile_last_pur_idx",
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="customerloyaltyaccount",
            index=models.Index(
                fields=["current_points"], name="loyalty_account_points_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customerloyaltyaccount",
            index=models.Index(
                fields=["last_activity_date"], name="loyalty_account_activity_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="customerloyaltyaccount",
            constraint=models.UniqueConstraint(
                fields=("customer", "program"), name="unique_customer_loyalty_program"
            ),
        ),
        migrations.AddIndex(
            model_name="loyaltytransaction",
            index=models.Index(
                fields=["loyalty_account", "transaction_date"],
                name="loyalty_account_date_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="loyaltytransaction",
            index=models.Index(
                fields=["transaction_type", "transaction_date"],
                name="loyalty_type_date_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="promotionalcampaign",
            index=models.Index(
                fields=["status", "start_date"], name="campaign_status_start_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="promotionalcampaign",
            index=models.Index(fields=["campaign_type"], name="campaign_type_idx"),
        ),
    ]
