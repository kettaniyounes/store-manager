# Generated by Django 5.2 on 2025-08-29 07:35

import django.db.models.deletion
import django.utils.timezone
import simple_history.models
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('products', '0002_initial'),
        ('settings_app', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalStoreInventory',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('quantity_on_hand', models.IntegerField(default=0, help_text='Current stock quantity at this location', verbose_name='Quantity on Hand')),
                ('quantity_reserved', models.IntegerField(default=0, help_text='Quantity reserved for pending orders/transfers', verbose_name='Quantity Reserved')),
                ('quantity_available', models.IntegerField(default=0, help_text='Available quantity (on hand - reserved)', verbose_name='Quantity Available')),
                ('reorder_point', models.IntegerField(default=0, help_text='Store-specific reorder point', verbose_name='Reorder Point')),
                ('max_stock_level', models.IntegerField(blank=True, help_text='Maximum stock level for this location', null=True, verbose_name='Maximum Stock Level')),
                ('average_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Weighted average cost at this location', max_digits=10, verbose_name='Average Cost')),
                ('last_counted_date', models.DateTimeField(blank=True, help_text='Date of last physical inventory count', null=True, verbose_name='Last Counted Date')),
                ('last_movement_date', models.DateTimeField(blank=True, help_text='Date of last stock movement', null=True, verbose_name='Last Movement Date')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='products.product', verbose_name='Product')),
                ('product_variant', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='products.productvariant', verbose_name='Product Variant')),
                ('store', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='settings_app.store', verbose_name='Store')),
            ],
            options={
                'verbose_name': 'historical Store Inventory',
                'verbose_name_plural': 'historical Store Inventories',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalStoreInventoryCount',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('count_number', models.CharField(db_index=True, max_length=50, verbose_name='Count Number')),
                ('count_date', models.DateField(verbose_name='Count Date')),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planned', max_length=20, verbose_name='Status')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('approved_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('counted_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Counted By')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('store', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='settings_app.store', verbose_name='Store')),
            ],
            options={
                'verbose_name': 'historical Store Inventory Count',
                'verbose_name_plural': 'historical Store Inventory Counts',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalStoreStockMovement',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('movement_id', models.CharField(db_index=True, default=uuid.uuid4, max_length=50, verbose_name='Movement ID')),
                ('movement_type', models.CharField(choices=[('purchase', 'Purchase/Stock In'), ('sale', 'Sale/Stock Out'), ('adjustment', 'Stock Adjustment'), ('transfer_in', 'Transfer In'), ('transfer_out', 'Transfer Out'), ('return', 'Customer Return'), ('damage', 'Damage/Loss'), ('expired', 'Expired Product'), ('count', 'Physical Count Adjustment')], max_length=20, verbose_name='Movement Type')),
                ('quantity', models.IntegerField(help_text='Positive for stock in, negative for stock out', verbose_name='Quantity')),
                ('quantity_before', models.IntegerField(help_text='Stock quantity before this movement', verbose_name='Quantity Before')),
                ('quantity_after', models.IntegerField(help_text='Stock quantity after this movement', verbose_name='Quantity After')),
                ('unit_cost', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Unit Cost')),
                ('total_cost', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Total Cost')),
                ('reference_id', models.CharField(blank=True, help_text='Reference to related transaction (Sale, Transfer, etc.)', max_length=100, verbose_name='Reference ID')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('movement_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Movement Date')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='products.product', verbose_name='Product')),
                ('product_variant', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='products.productvariant', verbose_name='Product Variant')),
                ('store', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='settings_app.store', verbose_name='Store')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'historical Store Stock Movement',
                'verbose_name_plural': 'historical Store Stock Movements',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalStoreTransfer',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('transfer_number', models.CharField(db_index=True, max_length=50, verbose_name='Transfer Number')),
                ('quantity', models.IntegerField(help_text='Quantity to transfer', verbose_name='Quantity')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('in_transit', 'In Transit'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='Status')),
                ('transfer_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Transfer Date')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='Approved At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('approved_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('from_store', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='settings_app.store', verbose_name='From Store')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='products.product', verbose_name='Product')),
                ('product_variant', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='products.productvariant', verbose_name='Product Variant')),
                ('requested_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Requested By')),
                ('to_store', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='settings_app.store', verbose_name='To Store')),
            ],
            options={
                'verbose_name': 'historical Store Transfer',
                'verbose_name_plural': 'historical Store Transfers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='StoreInventoryCount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_number', models.CharField(max_length=50, unique=True, verbose_name='Count Number')),
                ('count_date', models.DateField(verbose_name='Count Date')),
                ('status', models.CharField(choices=[('planned', 'Planned'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planned', max_length=20, verbose_name='Status')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_counts', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('counted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_counts', to=settings.AUTH_USER_MODEL, verbose_name='Counted By')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_counts', to='settings_app.store', verbose_name='Store')),
            ],
            options={
                'verbose_name': 'Store Inventory Count',
                'verbose_name_plural': 'Store Inventory Counts',
                'ordering': ['-count_date'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalStoreInventoryCountItem',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('system_quantity', models.IntegerField(help_text='Quantity according to system records', verbose_name='System Quantity')),
                ('counted_quantity', models.IntegerField(help_text='Actual counted quantity', verbose_name='Counted Quantity')),
                ('variance', models.IntegerField(help_text='Difference between counted and system quantity', verbose_name='Variance')),
                ('unit_cost', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Unit Cost')),
                ('variance_value', models.DecimalField(decimal_places=2, help_text='Financial impact of the variance', max_digits=12, verbose_name='Variance Value')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='products.product', verbose_name='Product')),
                ('product_variant', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='products.productvariant', verbose_name='Product Variant')),
                ('count', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.storeinventorycount', verbose_name='Inventory Count')),
            ],
            options={
                'verbose_name': 'historical Store Inventory Count Item',
                'verbose_name_plural': 'historical Store Inventory Count Items',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPhysicalCountItem',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('system_quantity', models.IntegerField(help_text='Quantity according to system records', verbose_name='System Quantity')),
                ('counted_quantity', models.IntegerField(help_text='Actual counted quantity', verbose_name='Counted Quantity')),
                ('variance', models.IntegerField(help_text='Difference between counted and system quantity', verbose_name='Variance')),
                ('unit_cost', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Unit Cost')),
                ('variance_value', models.DecimalField(decimal_places=2, help_text='Financial impact of the variance', max_digits=12, verbose_name='Variance Value')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='products.product', verbose_name='Product')),
                ('product_variant', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='products.productvariant', verbose_name='Product Variant')),
                ('count', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.storeinventorycount', verbose_name='Physical Count')),
            ],
            options={
                'verbose_name': 'historical Physical Count Item',
                'verbose_name_plural': 'historical Physical Count Items',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='StoreInventory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity_on_hand', models.IntegerField(default=0, help_text='Current stock quantity at this location', verbose_name='Quantity on Hand')),
                ('quantity_reserved', models.IntegerField(default=0, help_text='Quantity reserved for pending orders/transfers', verbose_name='Quantity Reserved')),
                ('quantity_available', models.IntegerField(default=0, help_text='Available quantity (on hand - reserved)', verbose_name='Quantity Available')),
                ('reorder_point', models.IntegerField(default=0, help_text='Store-specific reorder point', verbose_name='Reorder Point')),
                ('max_stock_level', models.IntegerField(blank=True, help_text='Maximum stock level for this location', null=True, verbose_name='Maximum Stock Level')),
                ('average_cost', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Weighted average cost at this location', max_digits=10, verbose_name='Average Cost')),
                ('last_counted_date', models.DateTimeField(blank=True, help_text='Date of last physical inventory count', null=True, verbose_name='Last Counted Date')),
                ('last_movement_date', models.DateTimeField(blank=True, help_text='Date of last stock movement', null=True, verbose_name='Last Movement Date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='store_inventory', to='products.product', verbose_name='Product')),
                ('product_variant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='store_inventory', to='products.productvariant', verbose_name='Product Variant')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='settings_app.store', verbose_name='Store')),
            ],
            options={
                'verbose_name': 'Store Inventory',
                'verbose_name_plural': 'Store Inventories',
                'ordering': ['store', 'product'],
                'indexes': [models.Index(fields=['store', 'quantity_on_hand'], name='store_inventory_qty_idx'), models.Index(fields=['product', 'store'], name='product_store_idx'), models.Index(fields=['quantity_on_hand', 'reorder_point'], name='reorder_check_idx')],
                'unique_together': {('store', 'product', 'product_variant')},
            },
        ),
        migrations.CreateModel(
            name='PhysicalCountItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('system_quantity', models.IntegerField(help_text='Quantity according to system records', verbose_name='System Quantity')),
                ('counted_quantity', models.IntegerField(help_text='Actual counted quantity', verbose_name='Counted Quantity')),
                ('variance', models.IntegerField(help_text='Difference between counted and system quantity', verbose_name='Variance')),
                ('unit_cost', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Unit Cost')),
                ('variance_value', models.DecimalField(decimal_places=2, help_text='Financial impact of the variance', max_digits=12, verbose_name='Variance Value')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product', verbose_name='Product')),
                ('product_variant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='products.productvariant', verbose_name='Product Variant')),
                ('count', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='physicalcountitem_set', to='inventory.storeinventorycount', verbose_name='Physical Count')),
            ],
            options={
                'verbose_name': 'Physical Count Item',
                'verbose_name_plural': 'Physical Count Items',
                'unique_together': {('count', 'product', 'product_variant')},
            },
        ),
        migrations.CreateModel(
            name='StoreInventoryCountItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('system_quantity', models.IntegerField(help_text='Quantity according to system records', verbose_name='System Quantity')),
                ('counted_quantity', models.IntegerField(help_text='Actual counted quantity', verbose_name='Counted Quantity')),
                ('variance', models.IntegerField(help_text='Difference between counted and system quantity', verbose_name='Variance')),
                ('unit_cost', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Unit Cost')),
                ('variance_value', models.DecimalField(decimal_places=2, help_text='Financial impact of the variance', max_digits=12, verbose_name='Variance Value')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('count', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='count_items', to='inventory.storeinventorycount', verbose_name='Inventory Count')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product', verbose_name='Product')),
                ('product_variant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='products.productvariant', verbose_name='Product Variant')),
            ],
            options={
                'verbose_name': 'Store Inventory Count Item',
                'verbose_name_plural': 'Store Inventory Count Items',
                'unique_together': {('count', 'product', 'product_variant')},
            },
        ),
        migrations.CreateModel(
            name='StoreStockMovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('movement_id', models.CharField(default=uuid.uuid4, max_length=50, unique=True, verbose_name='Movement ID')),
                ('movement_type', models.CharField(choices=[('purchase', 'Purchase/Stock In'), ('sale', 'Sale/Stock Out'), ('adjustment', 'Stock Adjustment'), ('transfer_in', 'Transfer In'), ('transfer_out', 'Transfer Out'), ('return', 'Customer Return'), ('damage', 'Damage/Loss'), ('expired', 'Expired Product'), ('count', 'Physical Count Adjustment')], max_length=20, verbose_name='Movement Type')),
                ('quantity', models.IntegerField(help_text='Positive for stock in, negative for stock out', verbose_name='Quantity')),
                ('quantity_before', models.IntegerField(help_text='Stock quantity before this movement', verbose_name='Quantity Before')),
                ('quantity_after', models.IntegerField(help_text='Stock quantity after this movement', verbose_name='Quantity After')),
                ('unit_cost', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Unit Cost')),
                ('total_cost', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Total Cost')),
                ('reference_id', models.CharField(blank=True, help_text='Reference to related transaction (Sale, Transfer, etc.)', max_length=100, verbose_name='Reference ID')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('movement_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Movement Date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='store_stock_movements', to='products.product', verbose_name='Product')),
                ('product_variant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='store_stock_movements', to='products.productvariant', verbose_name='Product Variant')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory_stock_movements', to='settings_app.store', verbose_name='Store')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Store Stock Movement',
                'verbose_name_plural': 'Store Stock Movements',
                'ordering': ['-movement_date'],
                'indexes': [models.Index(fields=['store', 'movement_date'], name='inv_store_movement_date_idx'), models.Index(fields=['product', 'store', 'movement_date'], name='product_store_date_idx'), models.Index(fields=['movement_type', 'movement_date'], name='inv_movement_type_date_idx')],
            },
        ),
        migrations.CreateModel(
            name='StoreTransfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transfer_number', models.CharField(max_length=50, unique=True, verbose_name='Transfer Number')),
                ('quantity', models.IntegerField(help_text='Quantity to transfer', verbose_name='Quantity')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('in_transit', 'In Transit'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20, verbose_name='Status')),
                ('transfer_date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Transfer Date')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='Approved At')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='Completed At')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_approved_transfers', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('from_store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outbound_transfers', to='settings_app.store', verbose_name='From Store')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfers', to='products.product', verbose_name='Product')),
                ('product_variant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transfers', to='products.productvariant', verbose_name='Product Variant')),
                ('requested_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_requested_transfers', to=settings.AUTH_USER_MODEL, verbose_name='Requested By')),
                ('to_store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inbound_transfers', to='settings_app.store', verbose_name='To Store')),
            ],
            options={
                'verbose_name': 'Store Transfer',
                'verbose_name_plural': 'Store Transfers',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['from_store', 'to_store'], name='transfer_stores_idx'), models.Index(fields=['status', 'transfer_date'], name='transfer_status_date_idx')],
            },
        ),
    ]
