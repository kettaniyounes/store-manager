# Generated by Django 5.2 on 2025-09-02 17:44

import django.utils.timezone
import simple_history.models
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="BarcodeScanning",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        db_index=True, max_length=100, verbose_name="Barcode"
                    ),
                ),
                (
                    "scan_type",
                    models.CharField(
                        choices=[
                            ("receiving", "Receiving"),
                            ("sale", "Sale"),
                            ("count", "Physical Count"),
                            ("transfer", "Transfer"),
                            ("lookup", "Product Lookup"),
                        ],
                        max_length=20,
                        verbose_name="Scan Type",
                    ),
                ),
                ("quantity", models.IntegerField(default=1, verbose_name="Quantity")),
                (
                    "device_id",
                    models.CharField(
                        blank=True,
                        help_text="ID of scanning device or mobile app",
                        max_length=100,
                        verbose_name="Device ID",
                    ),
                ),
                (
                    "reference_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to related transaction",
                        max_length=100,
                        verbose_name="Reference ID",
                    ),
                ),
                (
                    "scan_timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Scan Timestamp"
                    ),
                ),
                (
                    "is_successful",
                    models.BooleanField(default=True, verbose_name="Scan Successful"),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, verbose_name="Error Message"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Barcode Scanning",
                "verbose_name_plural": "Barcode Scanning Records",
                "ordering": ["-scan_timestamp"],
            },
        ),
        migrations.CreateModel(
            name="BatchLotTracking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "batch_number",
                    models.CharField(max_length=100, verbose_name="Batch/Lot Number"),
                ),
                ("manufacture_date", models.DateField(verbose_name="Manufacture Date")),
                ("expiration_date", models.DateField(verbose_name="Expiration Date")),
                (
                    "received_date",
                    models.DateField(
                        default=django.utils.timezone.now, verbose_name="Received Date"
                    ),
                ),
                (
                    "initial_quantity",
                    models.IntegerField(verbose_name="Initial Quantity"),
                ),
                (
                    "current_quantity",
                    models.IntegerField(verbose_name="Current Quantity"),
                ),
                (
                    "reserved_quantity",
                    models.IntegerField(default=0, verbose_name="Reserved Quantity"),
                ),
                (
                    "unit_cost",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Unit Cost"
                    ),
                ),
                (
                    "total_cost",
                    models.DecimalField(
                        decimal_places=2, max_digits=12, verbose_name="Total Cost"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("quarantined", "Quarantined"),
                            ("expired", "Expired"),
                            ("recalled", "Recalled"),
                            ("sold_out", "Sold Out"),
                        ],
                        default="active",
                        max_length=20,
                        verbose_name="Batch Status",
                    ),
                ),
                (
                    "quality_grade",
                    models.CharField(
                        blank=True,
                        help_text="A, B, C grade or custom grading",
                        max_length=10,
                        verbose_name="Quality Grade",
                    ),
                ),
                (
                    "purchase_order_number",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Purchase Order Number"
                    ),
                ),
                (
                    "certificate_number",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Certificate Number"
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Batch/Lot Tracking",
                "verbose_name_plural": "Batch/Lot Tracking Records",
                "ordering": ["expiration_date"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalBarcodeScanning",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "barcode",
                    models.CharField(
                        db_index=True, max_length=100, verbose_name="Barcode"
                    ),
                ),
                (
                    "scan_type",
                    models.CharField(
                        choices=[
                            ("receiving", "Receiving"),
                            ("sale", "Sale"),
                            ("count", "Physical Count"),
                            ("transfer", "Transfer"),
                            ("lookup", "Product Lookup"),
                        ],
                        max_length=20,
                        verbose_name="Scan Type",
                    ),
                ),
                ("quantity", models.IntegerField(default=1, verbose_name="Quantity")),
                (
                    "device_id",
                    models.CharField(
                        blank=True,
                        help_text="ID of scanning device or mobile app",
                        max_length=100,
                        verbose_name="Device ID",
                    ),
                ),
                (
                    "reference_id",
                    models.CharField(
                        blank=True,
                        help_text="Reference to related transaction",
                        max_length=100,
                        verbose_name="Reference ID",
                    ),
                ),
                (
                    "scan_timestamp",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="Scan Timestamp"
                    ),
                ),
                (
                    "is_successful",
                    models.BooleanField(default=True, verbose_name="Scan Successful"),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, verbose_name="Error Message"),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Barcode Scanning",
                "verbose_name_plural": "historical Barcode Scanning Records",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalBatchLotTracking",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "batch_number",
                    models.CharField(max_length=100, verbose_name="Batch/Lot Number"),
                ),
                ("manufacture_date", models.DateField(verbose_name="Manufacture Date")),
                ("expiration_date", models.DateField(verbose_name="Expiration Date")),
                (
                    "received_date",
                    models.DateField(
                        default=django.utils.timezone.now, verbose_name="Received Date"
                    ),
                ),
                (
                    "initial_quantity",
                    models.IntegerField(verbose_name="Initial Quantity"),
                ),
                (
                    "current_quantity",
                    models.IntegerField(verbose_name="Current Quantity"),
                ),
                (
                    "reserved_quantity",
                    models.IntegerField(default=0, verbose_name="Reserved Quantity"),
                ),
                (
                    "unit_cost",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Unit Cost"
                    ),
                ),
                (
                    "total_cost",
                    models.DecimalField(
                        decimal_places=2, max_digits=12, verbose_name="Total Cost"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("quarantined", "Quarantined"),
                            ("expired", "Expired"),
                            ("recalled", "Recalled"),
                            ("sold_out", "Sold Out"),
                        ],
                        default="active",
                        max_length=20,
                        verbose_name="Batch Status",
                    ),
                ),
                (
                    "quality_grade",
                    models.CharField(
                        blank=True,
                        help_text="A, B, C grade or custom grading",
                        max_length=10,
                        verbose_name="Quality Grade",
                    ),
                ),
                (
                    "purchase_order_number",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Purchase Order Number"
                    ),
                ),
                (
                    "certificate_number",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="Certificate Number"
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Batch/Lot Tracking",
                "verbose_name_plural": "historical Batch/Lot Tracking Records",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalPhysicalCountItem",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "system_quantity",
                    models.IntegerField(
                        help_text="Quantity according to system records",
                        verbose_name="System Quantity",
                    ),
                ),
                (
                    "counted_quantity",
                    models.IntegerField(
                        help_text="Actual counted quantity",
                        verbose_name="Counted Quantity",
                    ),
                ),
                (
                    "variance",
                    models.IntegerField(
                        help_text="Difference between counted and system quantity",
                        verbose_name="Variance",
                    ),
                ),
                (
                    "unit_cost",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Unit Cost"
                    ),
                ),
                (
                    "variance_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Financial impact of the variance",
                        max_digits=12,
                        verbose_name="Variance Value",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Physical Count Item",
                "verbose_name_plural": "historical Physical Count Items",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalSmartReorderRule",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "calculation_method",
                    models.CharField(
                        choices=[
                            ("fixed", "Fixed Reorder Point"),
                            ("sales_velocity", "Sales Velocity Based"),
                            ("seasonal_adjusted", "Seasonal Adjusted"),
                            ("min_max", "Min-Max Method"),
                            ("economic_order_quantity", "Economic Order Quantity"),
                            ("predictive", "Predictive Analytics"),
                        ],
                        default="sales_velocity",
                        max_length=30,
                        verbose_name="Calculation Method",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=10,
                        verbose_name="Priority",
                    ),
                ),
                (
                    "lead_time_days",
                    models.IntegerField(default=7, verbose_name="Lead Time (Days)"),
                ),
                (
                    "safety_stock_days",
                    models.IntegerField(default=3, verbose_name="Safety Stock (Days)"),
                ),
                (
                    "review_period_days",
                    models.IntegerField(
                        default=30, verbose_name="Review Period (Days)"
                    ),
                ),
                (
                    "service_level",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("95.00"),
                        max_digits=5,
                        verbose_name="Service Level (%)",
                    ),
                ),
                (
                    "current_reorder_point",
                    models.IntegerField(
                        default=0, verbose_name="Current Reorder Point"
                    ),
                ),
                (
                    "current_order_quantity",
                    models.IntegerField(
                        default=0, verbose_name="Current Order Quantity"
                    ),
                ),
                (
                    "sales_velocity",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=10,
                        verbose_name="Sales Velocity (units/day)",
                    ),
                ),
                (
                    "demand_variability",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=10,
                        verbose_name="Demand Variability (std dev)",
                    ),
                ),
                (
                    "last_calculated",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Calculated"
                    ),
                ),
                (
                    "calculation_accuracy",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Calculation Accuracy (%)",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Smart Reorder Rule",
                "verbose_name_plural": "historical Smart Reorder Rules",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalStoreInventory",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "quantity_on_hand",
                    models.IntegerField(
                        default=0,
                        help_text="Current stock quantity at this location",
                        verbose_name="Quantity on Hand",
                    ),
                ),
                (
                    "quantity_reserved",
                    models.IntegerField(
                        default=0,
                        help_text="Quantity reserved for pending orders/transfers",
                        verbose_name="Quantity Reserved",
                    ),
                ),
                (
                    "quantity_available",
                    models.IntegerField(
                        default=0,
                        help_text="Available quantity (on hand - reserved)",
                        verbose_name="Quantity Available",
                    ),
                ),
                (
                    "reorder_point",
                    models.IntegerField(
                        default=0,
                        help_text="Store-specific reorder point",
                        verbose_name="Reorder Point",
                    ),
                ),
                (
                    "max_stock_level",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum stock level for this location",
                        null=True,
                        verbose_name="Maximum Stock Level",
                    ),
                ),
                (
                    "average_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Weighted average cost at this location",
                        max_digits=10,
                        verbose_name="Average Cost",
                    ),
                ),
                (
                    "last_counted_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date of last physical inventory count",
                        null=True,
                        verbose_name="Last Counted Date",
                    ),
                ),
                (
                    "last_movement_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date of last stock movement",
                        null=True,
                        verbose_name="Last Movement Date",
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Store Inventory",
                "verbose_name_plural": "historical Store Inventories",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalStoreInventoryCount",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "count_number",
                    models.CharField(
                        db_index=True, max_length=50, verbose_name="Count Number"
                    ),
                ),
                ("count_date", models.DateField(verbose_name="Count Date")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planned", "Planned"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="planned",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Store Inventory Count",
                "verbose_name_plural": "historical Store Inventory Counts",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalStoreInventoryCountItem",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "system_quantity",
                    models.IntegerField(
                        help_text="Quantity according to system records",
                        verbose_name="System Quantity",
                    ),
                ),
                (
                    "counted_quantity",
                    models.IntegerField(
                        help_text="Actual counted quantity",
                        verbose_name="Counted Quantity",
                    ),
                ),
                (
                    "variance",
                    models.IntegerField(
                        help_text="Difference between counted and system quantity",
                        verbose_name="Variance",
                    ),
                ),
                (
                    "unit_cost",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Unit Cost"
                    ),
                ),
                (
                    "variance_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Financial impact of the variance",
                        max_digits=12,
                        verbose_name="Variance Value",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Store Inventory Count Item",
                "verbose_name_plural": "historical Store Inventory Count Items",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalSupplierPerformance",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "evaluation_period_start",
                    models.DateField(verbose_name="Evaluation Period Start"),
                ),
                (
                    "evaluation_period_end",
                    models.DateField(verbose_name="Evaluation Period End"),
                ),
                (
                    "total_orders",
                    models.IntegerField(default=0, verbose_name="Total Orders"),
                ),
                (
                    "on_time_deliveries",
                    models.IntegerField(default=0, verbose_name="On-Time Deliveries"),
                ),
                (
                    "quality_rating",
                    models.IntegerField(
                        choices=[
                            (1, "Poor"),
                            (2, "Below Average"),
                            (3, "Average"),
                            (4, "Good"),
                            (5, "Excellent"),
                        ],
                        default=3,
                        verbose_name="Quality Rating",
                    ),
                ),
                (
                    "price_competitiveness",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("3.00"),
                        help_text="Rating of price competitiveness compared to market",
                        max_digits=5,
                        verbose_name="Price Competitiveness (1-5)",
                    ),
                ),
                (
                    "communication_rating",
                    models.IntegerField(
                        choices=[
                            (1, "Poor"),
                            (2, "Below Average"),
                            (3, "Average"),
                            (4, "Good"),
                            (5, "Excellent"),
                        ],
                        default=3,
                        verbose_name="Communication Rating",
                    ),
                ),
                (
                    "on_time_delivery_rate",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=5,
                        verbose_name="On-Time Delivery Rate (%)",
                    ),
                ),
                (
                    "average_lead_time_days",
                    models.DecimalField(
                        decimal_places=1,
                        default=Decimal("0.0"),
                        max_digits=5,
                        verbose_name="Average Lead Time (Days)",
                    ),
                ),
                (
                    "defect_rate",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=5,
                        verbose_name="Defect Rate (%)",
                    ),
                ),
                (
                    "overall_score",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=4,
                        verbose_name="Overall Performance Score",
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, verbose_name="Performance Notes"),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Supplier Performance",
                "verbose_name_plural": "historical Supplier Performance Records",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="PhysicalCountItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "system_quantity",
                    models.IntegerField(
                        help_text="Quantity according to system records",
                        verbose_name="System Quantity",
                    ),
                ),
                (
                    "counted_quantity",
                    models.IntegerField(
                        help_text="Actual counted quantity",
                        verbose_name="Counted Quantity",
                    ),
                ),
                (
                    "variance",
                    models.IntegerField(
                        help_text="Difference between counted and system quantity",
                        verbose_name="Variance",
                    ),
                ),
                (
                    "unit_cost",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Unit Cost"
                    ),
                ),
                (
                    "variance_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Financial impact of the variance",
                        max_digits=12,
                        verbose_name="Variance Value",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Physical Count Item",
                "verbose_name_plural": "Physical Count Items",
            },
        ),
        migrations.CreateModel(
            name="SmartReorderRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "calculation_method",
                    models.CharField(
                        choices=[
                            ("fixed", "Fixed Reorder Point"),
                            ("sales_velocity", "Sales Velocity Based"),
                            ("seasonal_adjusted", "Seasonal Adjusted"),
                            ("min_max", "Min-Max Method"),
                            ("economic_order_quantity", "Economic Order Quantity"),
                            ("predictive", "Predictive Analytics"),
                        ],
                        default="sales_velocity",
                        max_length=30,
                        verbose_name="Calculation Method",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="Is Active"),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=10,
                        verbose_name="Priority",
                    ),
                ),
                (
                    "lead_time_days",
                    models.IntegerField(default=7, verbose_name="Lead Time (Days)"),
                ),
                (
                    "safety_stock_days",
                    models.IntegerField(default=3, verbose_name="Safety Stock (Days)"),
                ),
                (
                    "review_period_days",
                    models.IntegerField(
                        default=30, verbose_name="Review Period (Days)"
                    ),
                ),
                (
                    "service_level",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("95.00"),
                        max_digits=5,
                        verbose_name="Service Level (%)",
                    ),
                ),
                (
                    "current_reorder_point",
                    models.IntegerField(
                        default=0, verbose_name="Current Reorder Point"
                    ),
                ),
                (
                    "current_order_quantity",
                    models.IntegerField(
                        default=0, verbose_name="Current Order Quantity"
                    ),
                ),
                (
                    "sales_velocity",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=10,
                        verbose_name="Sales Velocity (units/day)",
                    ),
                ),
                (
                    "demand_variability",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=10,
                        verbose_name="Demand Variability (std dev)",
                    ),
                ),
                (
                    "last_calculated",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last Calculated"
                    ),
                ),
                (
                    "calculation_accuracy",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Calculation Accuracy (%)",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Smart Reorder Rule",
                "verbose_name_plural": "Smart Reorder Rules",
                "ordering": ["priority", "product__name"],
            },
        ),
        migrations.CreateModel(
            name="StoreInventory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity_on_hand",
                    models.IntegerField(
                        default=0,
                        help_text="Current stock quantity at this location",
                        verbose_name="Quantity on Hand",
                    ),
                ),
                (
                    "quantity_reserved",
                    models.IntegerField(
                        default=0,
                        help_text="Quantity reserved for pending orders/transfers",
                        verbose_name="Quantity Reserved",
                    ),
                ),
                (
                    "quantity_available",
                    models.IntegerField(
                        default=0,
                        help_text="Available quantity (on hand - reserved)",
                        verbose_name="Quantity Available",
                    ),
                ),
                (
                    "reorder_point",
                    models.IntegerField(
                        default=0,
                        help_text="Store-specific reorder point",
                        verbose_name="Reorder Point",
                    ),
                ),
                (
                    "max_stock_level",
                    models.IntegerField(
                        blank=True,
                        help_text="Maximum stock level for this location",
                        null=True,
                        verbose_name="Maximum Stock Level",
                    ),
                ),
                (
                    "average_cost",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        help_text="Weighted average cost at this location",
                        max_digits=10,
                        verbose_name="Average Cost",
                    ),
                ),
                (
                    "last_counted_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date of last physical inventory count",
                        null=True,
                        verbose_name="Last Counted Date",
                    ),
                ),
                (
                    "last_movement_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date of last stock movement",
                        null=True,
                        verbose_name="Last Movement Date",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Store Inventory",
                "verbose_name_plural": "Store Inventories",
                "ordering": ["store", "product"],
            },
        ),
        migrations.CreateModel(
            name="StoreInventoryCount",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "count_number",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="Count Number"
                    ),
                ),
                ("count_date", models.DateField(verbose_name="Count Date")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("planned", "Planned"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="planned",
                        max_length=20,
                        verbose_name="Status",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Store Inventory Count",
                "verbose_name_plural": "Store Inventory Counts",
                "ordering": ["-count_date"],
            },
        ),
        migrations.CreateModel(
            name="StoreInventoryCountItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "system_quantity",
                    models.IntegerField(
                        help_text="Quantity according to system records",
                        verbose_name="System Quantity",
                    ),
                ),
                (
                    "counted_quantity",
                    models.IntegerField(
                        help_text="Actual counted quantity",
                        verbose_name="Counted Quantity",
                    ),
                ),
                (
                    "variance",
                    models.IntegerField(
                        help_text="Difference between counted and system quantity",
                        verbose_name="Variance",
                    ),
                ),
                (
                    "unit_cost",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="Unit Cost"
                    ),
                ),
                (
                    "variance_value",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Financial impact of the variance",
                        max_digits=12,
                        verbose_name="Variance Value",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="Notes")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Store Inventory Count Item",
                "verbose_name_plural": "Store Inventory Count Items",
            },
        ),
        migrations.CreateModel(
            name="SupplierPerformance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "evaluation_period_start",
                    models.DateField(verbose_name="Evaluation Period Start"),
                ),
                (
                    "evaluation_period_end",
                    models.DateField(verbose_name="Evaluation Period End"),
                ),
                (
                    "total_orders",
                    models.IntegerField(default=0, verbose_name="Total Orders"),
                ),
                (
                    "on_time_deliveries",
                    models.IntegerField(default=0, verbose_name="On-Time Deliveries"),
                ),
                (
                    "quality_rating",
                    models.IntegerField(
                        choices=[
                            (1, "Poor"),
                            (2, "Below Average"),
                            (3, "Average"),
                            (4, "Good"),
                            (5, "Excellent"),
                        ],
                        default=3,
                        verbose_name="Quality Rating",
                    ),
                ),
                (
                    "price_competitiveness",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("3.00"),
                        help_text="Rating of price competitiveness compared to market",
                        max_digits=5,
                        verbose_name="Price Competitiveness (1-5)",
                    ),
                ),
                (
                    "communication_rating",
                    models.IntegerField(
                        choices=[
                            (1, "Poor"),
                            (2, "Below Average"),
                            (3, "Average"),
                            (4, "Good"),
                            (5, "Excellent"),
                        ],
                        default=3,
                        verbose_name="Communication Rating",
                    ),
                ),
                (
                    "on_time_delivery_rate",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=5,
                        verbose_name="On-Time Delivery Rate (%)",
                    ),
                ),
                (
                    "average_lead_time_days",
                    models.DecimalField(
                        decimal_places=1,
                        default=Decimal("0.0"),
                        max_digits=5,
                        verbose_name="Average Lead Time (Days)",
                    ),
                ),
                (
                    "defect_rate",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=5,
                        verbose_name="Defect Rate (%)",
                    ),
                ),
                (
                    "overall_score",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=4,
                        verbose_name="Overall Performance Score",
                    ),
                ),
                (
                    "notes",
                    models.TextField(blank=True, verbose_name="Performance Notes"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Supplier Performance",
                "verbose_name_plural": "Supplier Performance Records",
                "ordering": ["-evaluation_period_end"],
            },
        ),
    ]
