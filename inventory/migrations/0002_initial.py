# Generated by Django 5.2 on 2025-09-04 13:05

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("inventory", "0001_initial"),
        ("products", "0002_initial"),
        ("settings_app", "0001_initial"),
        ("suppliers", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="batchlottracking",
            name="supplier",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="batch_lots",
                to="suppliers.supplier",
                verbose_name="Supplier",
            ),
        ),
        migrations.AddField(
            model_name="historicalbarcodescanning",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalbarcodescanning",
            name="product",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="products.product",
                verbose_name="Product",
            ),
        ),
        migrations.AddField(
            model_name="historicalbarcodescanning",
            name="store",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="settings_app.store",
                verbose_name="Store",
            ),
        ),
        migrations.AddField(
            model_name="historicalbarcodescanning",
            name="user",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Scanned By",
            ),
        ),
        migrations.AddField(
            model_name="historicalbatchlottracking",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalbatchlottracking",
            name="product",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="products.product",
                verbose_name="Product",
            ),
        ),
        migrations.AddField(
            model_name="historicalbatchlottracking",
            name="store",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="settings_app.store",
                verbose_name="Store",
            ),
        ),
        migrations.AddField(
            model_name="historicalbatchlottracking",
            name="supplier",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="suppliers.supplier",
                verbose_name="Supplier",
            ),
        ),
        migrations.AddField(
            model_name="historicalphysicalcountitem",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalphysicalcountitem",
            name="product",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="products.product",
                verbose_name="Product",
            ),
        ),
        migrations.AddField(
            model_name="historicalphysicalcountitem",
            name="product_variant",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="products.productvariant",
                verbose_name="Product Variant",
            ),
        ),
        migrations.AddField(
            model_name="historicalsmartreorderrule",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalsmartreorderrule",
            name="product",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="products.product",
                verbose_name="Product",
            ),
        ),
        migrations.AddField(
            model_name="historicalsmartreorderrule",
            name="store",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="settings_app.store",
                verbose_name="Store",
            ),
        ),
        migrations.AddField(
            model_name="historicalstoreinventory",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalstoreinventory",
            name="product",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="products.product",
                verbose_name="Product",
            ),
        ),
        migrations.AddField(
            model_name="historicalstoreinventory",
            name="product_variant",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="products.productvariant",
                verbose_name="Product Variant",
            ),
        ),
        migrations.AddField(
            model_name="historicalstoreinventory",
            name="store",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="settings_app.store",
                verbose_name="Store",
            ),
        ),
        migrations.AddField(
            model_name="historicalstoreinventorycount",
            name="approved_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Approved By",
            ),
        ),
        migrations.AddField(
            model_name="historicalstoreinventorycount",
            name="counted_by",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Counted By",
            ),
        ),
        migrations.AddField(
            model_name="historicalstoreinventorycount",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalstoreinventorycount",
            name="store",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="settings_app.store",
                verbose_name="Store",
            ),
        ),
        migrations.AddField(
            model_name="historicalstoreinventorycountitem",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalstoreinventorycountitem",
            name="product",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="products.product",
                verbose_name="Product",
            ),
        ),
        migrations.AddField(
            model_name="historicalstoreinventorycountitem",
            name="product_variant",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="products.productvariant",
                verbose_name="Product Variant",
            ),
        ),
        migrations.AddField(
            model_name="historicalsupplierperformance",
            name="history_user",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalsupplierperformance",
            name="product",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="products.product",
                verbose_name="Product",
            ),
        ),
        migrations.AddField(
            model_name="historicalsupplierperformance",
            name="supplier",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="suppliers.supplier",
                verbose_name="Supplier",
            ),
        ),
        migrations.AddField(
            model_name="physicalcountitem",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="products.product",
                verbose_name="Product",
            ),
        ),
        migrations.AddField(
            model_name="physicalcountitem",
            name="product_variant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="products.productvariant",
                verbose_name="Product Variant",
            ),
        ),
        migrations.AddField(
            model_name="smartreorderrule",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="reorder_rules",
                to="products.product",
                verbose_name="Product",
            ),
        ),
        migrations.AddField(
            model_name="smartreorderrule",
            name="store",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="reorder_rules",
                to="settings_app.store",
                verbose_name="Store",
            ),
        ),
        migrations.AddField(
            model_name="storeinventory",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="store_inventory",
                to="products.product",
                verbose_name="Product",
            ),
        ),
        migrations.AddField(
            model_name="storeinventory",
            name="product_variant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="store_inventory",
                to="products.productvariant",
                verbose_name="Product Variant",
            ),
        ),
        migrations.AddField(
            model_name="storeinventory",
            name="store",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="inventory",
                to="settings_app.store",
                verbose_name="Store",
            ),
        ),
        migrations.AddField(
            model_name="storeinventorycount",
            name="approved_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="approved_counts",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Approved By",
            ),
        ),
        migrations.AddField(
            model_name="storeinventorycount",
            name="counted_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="inventory_counts",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Counted By",
            ),
        ),
        migrations.AddField(
            model_name="storeinventorycount",
            name="store",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="inventory_counts",
                to="settings_app.store",
                verbose_name="Store",
            ),
        ),
        migrations.AddField(
            model_name="physicalcountitem",
            name="count",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="physicalcountitem_set",
                to="inventory.storeinventorycount",
                verbose_name="Physical Count",
            ),
        ),
        migrations.AddField(
            model_name="historicalstoreinventorycountitem",
            name="count",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="inventory.storeinventorycount",
                verbose_name="Inventory Count",
            ),
        ),
        migrations.AddField(
            model_name="historicalphysicalcountitem",
            name="count",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="inventory.storeinventorycount",
                verbose_name="Physical Count",
            ),
        ),
        migrations.AddField(
            model_name="storeinventorycountitem",
            name="count",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="count_items",
                to="inventory.storeinventorycount",
                verbose_name="Inventory Count",
            ),
        ),
        migrations.AddField(
            model_name="storeinventorycountitem",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="products.product",
                verbose_name="Product",
            ),
        ),
        migrations.AddField(
            model_name="storeinventorycountitem",
            name="product_variant",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="products.productvariant",
                verbose_name="Product Variant",
            ),
        ),
        migrations.AddField(
            model_name="supplierperformance",
            name="product",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="supplier_performance",
                to="products.product",
                verbose_name="Product",
            ),
        ),
        migrations.AddField(
            model_name="supplierperformance",
            name="supplier",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="performance_records",
                to="suppliers.supplier",
                verbose_name="Supplier",
            ),
        ),
        migrations.AddIndex(
            model_name="barcodescanning",
            index=models.Index(
                fields=["barcode", "scan_timestamp"], name="barcode_scan_time_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="barcodescanning",
            index=models.Index(
                fields=["store", "scan_type"], name="store_scan_type_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="barcodescanning",
            index=models.Index(
                fields=["user", "scan_timestamp"], name="user_scan_time_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="batchlottracking",
            index=models.Index(
                fields=["expiration_date", "status"], name="batch_expiry_status_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="batchlottracking",
            index=models.Index(
                fields=["product", "store", "status"], name="batch_product_store_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="batchlottracking",
            index=models.Index(
                fields=["supplier", "manufacture_date"], name="batch_supplier_mfg_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="batchlottracking",
            unique_together={("batch_number", "product", "store")},
        ),
        migrations.AddIndex(
            model_name="smartreorderrule",
            index=models.Index(
                fields=["store", "is_active"], name="reorder_store_active_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="smartreorderrule",
            index=models.Index(
                fields=["priority", "last_calculated"], name="reorder_priority_calc_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="smartreorderrule",
            unique_together={("store", "product")},
        ),
        migrations.AddIndex(
            model_name="storeinventory",
            index=models.Index(
                fields=["store", "quantity_on_hand"], name="store_inventory_qty_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="storeinventory",
            index=models.Index(fields=["product", "store"], name="product_store_idx"),
        ),
        migrations.AddIndex(
            model_name="storeinventory",
            index=models.Index(
                fields=["quantity_on_hand", "reorder_point"], name="reorder_check_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="storeinventory",
            unique_together={("store", "product", "product_variant")},
        ),
        migrations.AlterUniqueTogether(
            name="physicalcountitem",
            unique_together={("count", "product", "product_variant")},
        ),
        migrations.AlterUniqueTogether(
            name="storeinventorycountitem",
            unique_together={("count", "product", "product_variant")},
        ),
        migrations.AlterUniqueTogether(
            name="supplierperformance",
            unique_together={("supplier", "product", "evaluation_period_start")},
        ),
    ]
